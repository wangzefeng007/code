<?phpnamespace app\api\controller\dd;use function PHPSTORM_META\type;use think\Controller;use think\Db;use think\Model;use Session;/** * 数据联动/公式计算 接口 */class Formulathree extends Base{    /**     * 公式 传入方法和值 计算对应内容     */    //DATEDIF    function DateDiff($last_str)    {	$a = explode(',',$last_str);	// dump($last_str);		$part = $a[0];		$begin = $a[1];		$end = $a[2];		if($begin == '0'){			$begin = (int)$a[1];		}		if($end == '0'){			$end = (int)$a[2];		}						$part = mb_substr($part, 1);		$part = mb_substr($part, 0, -1);		// dump($begin);		// dump($end);        if($begin !== '' && $begin !== 0){        	$one = "ok";        }else{        	$one = "no";        }        if($end !== '' && $end !== 0){        	$two = "ok";        }else{        	$two = "no";        }		        if($one == 'ok' && $two == 'ok'){        	preg_match('/[a-zA-Z]/',$part,$lastpart);        	$zm = $lastpart[0];			$strend = strtotime($end);			$strbegin = strtotime($begin);			if($strend == false){				$ex = explode(':',$end);				// dump($ex);				$strend = 60 * 60 * $ex[0] + 60* $ex[1];			}else if($strbegin == false){				$ep = explode(':',$begin);				$strbegin = 60 * 60 * $ep[0] + 60* $ep[1];			}else{							}			$diff = $strend - $strbegin;        	if($zm == 'y'){        		$diff = bcdiv($diff, (60 * 60 * 24 * 365),2);        	}else if($zm == 'm'){        		$diff = bcdiv($diff, (60 * 60 * 24 * 30),2);        	}else if($zm == 'w'){        		$diff = bcdiv($diff, (60 * 60 * 24 * 7),2);        	}else if($zm == 'd'){        		$diff = bcdiv($diff, (60 * 60 * 24),2);        	}else if($zm == 'h'){        		$diff = bcdiv($diff, (60 * 60),2);        	}else if($zm == 'n'){        		$diff = bcdiv($diff, 60,2);        	}        	// dump($diff);        	return $diff;			        }else{        	return 'n';        }    }    //SUM    function SUM($str)    {        $str = explode(",", $str);        return (string)array_sum($str);    }    //CONCATENATE    function CONCATENATE($str)    {        $str = str_replace(",", "", $str);        return $str;    }    //UNION    function UNION($str)    {        $str = explode(",", $str);        $str = array_unique($str);        $str = implode(",", $str);        return $str;    }    //LEFT    function LEFT($str, $length)    {        $str = substr($str, 0, $length);        return $str;    }    //ROUND    function ROUND($str)    {        $n = explode(',', $str);        $num = round($n[0], $n[1]);        return $num;    }    //COUNT    function COUNT($str)    {        $str = explode(",", $str);        $num = count($str);        return $num;    }    //MAX    function MAX($str)    {        $str = explode(",", $str);        $max = max($str);        return $max;    }    //MIN    function MIN($str)    {        $str = explode(",", $str);        $max = min($str);        return $max;    }    //IF    function IFT($if, $result, $else)    {        try {            $a = eval("return $if;");            if ($a) {                return $result;            } else {                return $else;            }        } catch (\Exception $e) {            return '';        }    }    //IFS    function IFS($str)    {        $str = explode(",", $str);        for ($i = 0; $i < count($str); $i++) {            if ($i % 2 == 0) {                try {                    $a = eval("return $str[$i];");                    if ($a) {                        if(empty($str[$i + 1])){                            return '';                        }                        return $str[$i + 1];                    }                }catch (\Exception $e) {                }            }        }        return '';    }    //MAPX AVG    function AVG($str)    {        $str = explode(",", $str);        $num = array_sum($str) / count($str);        return $num;    }    //MAPX    function MAPX($fn, $now, $contrast, $target)    {        // $json = 'MAPX(first,4,2,1)';        switch ($fn) {            case "first":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                // dump ($condition);                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->select();                        array_push($array, $inf);                    }                    return $array[0][0]['value'];                }                break;            case "last":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                // dump ($condition);                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->select();                        array_push($array, $inf);                    }                    // dump($array);                    $a = count($array[0]);                    $a = $a - 1;                    return $array[0][$a]['value'];                }                break;            case "max":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->find();                        array_push($array, $inf);                    }                    foreach ($array as $val) {                        $val = join(",", $val);                        $temp_array[] = $val;                    }                    $str = implode(",", $temp_array);                    $result = $this->MAX($str);                    return $result;                }                break;            case "min":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->find();                        array_push($array, $inf);                    }                    foreach ($array as $val) {                        $val = join(",", $val);                        $temp_array[] = $val;                    }                    $str = implode(",", $temp_array);                    $result = $this->MIN($str);                    return $result;                }                break;            case "avg":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                // dump($now);                // dump($contrast);                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->find();                        array_push($array, $inf);                    }                    foreach ($array as $val) {                        $val = join(",", $val);                        $temp_array[] = $val;                    }                    $str = implode(",", $temp_array);                    $result = $this->AVG($str);                    return $result;                }                break;            case "sum":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->find();                        array_push($array, $inf);                    }                    foreach ($array as $val) {                        $val = join(",", $val);                        $temp_array[] = $val;                    }                    $str = implode(",", $temp_array);                    $result = $this->SUM($str);                    return $result;                }                break;            case "count":                $condition = Db::name('form_data')->field('sorekey,user_id,edittime')->where('value', $now)->where('key', $contrast)->select();                if (count($condition) == 0) {                    return '';                } else {                    $array = array();                    for ($a = 0; $a < count($condition); $a++) {                        $inf = Db::name('form_data')->field('value')->where('sorekey', $condition[$a]['sorekey'])->where('key', $target)->where('user_id', $condition[$a]['user_id'])->where('edittime', $condition[$a]['edittime'])->find();                        array_push($array, $inf);                    }                    foreach ($array as $val) {                        $val = join(",", $val);                        $temp_array[] = $val;                    }                    $str = implode(",", $temp_array);                    $result = $this->COUNT($str);                    return $result;                }                break;        }    }    //AND    function xAND($str)    {        $str = explode(",", $str);        foreach ($str as $k => $v) {            $a = eval("return $v;");            if (!$a) {                return 'false';            }        }        return 'true';    }    //OR    function xzOR($str)    {        $str = explode(",", $str);        foreach ($str as $k => $v) {            $a = eval("return $v;");            if ($a) {                return 'true';            }        }        return 'false';    }    //LEN    function LEN($str)    {        return mb_strlen($str);    }    //RIGHT    function RIGHT($str, $int)    {        return str_replace(mb_substr($str, 0, -$int), "", $str);    }    //MID    function MID($str, $start, $len)    {        return mb_substr($str, $start - 1, $len);    }    //INT    function INT($int)    {        return intval($int);    }    //MOD    function MOD($int1, $int2)    {        return $int1 % $int2;    }    //RAND    function RAND()    {        return mt_rand(0, 1000000) * 0.000001;    }    //ABS    function ABS($int)    {        return abs($int);    }    function FIXED($num, $length)    {        $num = round($num, $length);        return (string)$num;    }    //POWER    function POWER($int, $index)    {        return pow($int, $index);    }    //TIME    function TIME($h, $m, $s)    {        return $h / 24 + $m / (24 * 60) + $s / (24 * 60 * 60);    }    //TODAY    function TODAY()    {        return date("Y-m-d");    }    //YEAR    function YEAR($date)    {        $timestamp = strtotime($date);        return date("Y", $timestamp);    }    //MONTH    function MONTH($date)    {        $timestamp = strtotime($date);        return date("m", $timestamp);    }    //DAY    function DAY($date)    {        $timestamp = strtotime($date);        return date('d', $timestamp);    }    //TIMESTAMP    function TIMESTAMP($date)    {        return strtotime($date);    }    //DATEDELTA    function DATEDELTA($date, $day)    {        return date("Y-m-d", strtotime("$date+$day day"));    }    //DAYS    function DAYS($date1, $date2)    {        $date1 = strtotime($date1);        $date2 = strtotime($date2);        if ($date1 > $date2) {            $timestamp = round(($date1 - $date2) / 3600 / 24);        } else {            $timestamp = 0;        }        return $timestamp;    }    //NOW    function NOW()    {        return date('H:i:s');    }    //PRODUCT    function PRODUCT($list_str)    {        $list_str = str_replace('PRODUCT(', '', $list_str);        $str_obj = explode(",", $list_str);        return (string)array_product($str_obj);    }	//PRODUCT		function ROUNDT($list_str)	{		$rou = explode(',',$list_str);		$one = eval("return $rou[0];");		$two = $rou[1];		return(round($one,$two));	}	}